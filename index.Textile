---
layout: page
title: TBone
tagline: Automagic Event Binding for Backbone
---
{% include JB/setup %}

TBone removes the complexity of manually managing data dependencies in Backbone, enabling "live" templates as well functions that automatically re-execute when the data they reference changes.

TBone is designed to scale with your application, enabling simple re-use of data throughout your application without you needing to tell the page what to update when that data changes.

At AppNeta, we've used TBone to eliminate a set of custom page events corresponding such as "refresh data" and "add filter"; with a large application, it becomes difficult to manage what exactly needs to be refreshed when something changes.  While Backbone is a critical step toward reducing this complexity, TBone enables us to do so without even thinking about event binding; every view and model stays in sync by design and without unnecessary work.

<div style="display:none">

{% highlight html %}
<div tbone="inline onMyDesk">
    My <stapler><%=stapler.color%> <%=stapler.brand%> stapler</stapler>.
    <% _.each(staplers, function (stapler) { %>
      <stapler><%=stapler.color%> </stapler>
    <% }); %>
</div>
It is <input type="text" tbone="view input" data-value="stapler.color" />
{% endhighlight %}

<div tbone="inline onMyDesk">
    My <stapler><%=stapler.color%> <%=stapler.brand%> stapler</stapler>.
</div>
It is <input type="text" tbone="view input" data-value="stapler.color" />

</div>

h2. By Example

Let's create a model:

{% highlight javascript %}
tbone.createModel('stapler').singleton();
{% endhighlight %}

This creates a new Backbone.Model with a .name of stapler as well as an instance
of that Model at tbone.data.stapler.

{% highlight javascript %}
tbone.data.stapler.set('brand', 'Swingline');
{% endhighlight %}

Now, let's create a template:

{% highlight javascript %}
tbone.addTemplate('onMyDesk', 'My <%=stapler.color%> <%=stapler.brand%> stapler.');
{% endhighlight %}

We can augment this with a view to add "document.ready" style JS after-processing.

{% highlight javascript %}
tbone.createView('onMyDesk', function () {
  this.$el.css('background', tbone.lookup('stapler.color'));
});
var $el = jQuery('<div tmpl="onMyDesk"></div>').appendTo('body');
tbone.render($el);
{% endhighlight %}

What do we get?

{% highlight javascript %}
My Swingline stapler.
{% endhighlight %}

Oh shoot!  We forgot to set the color.  No problem.  Just set it, and TBone rerenders
the template and view to keep in sync with its source data.

{% highlight javascript %}
tbone.set('stapler.color', 'red');
{% endhighlight %}

"Try it out on JSFiddle":http://jsfiddle.net/dantillberg/dFbpE/

h2. License

TBone is freely redistributable under the "MIT License":https://github.com/appneta/tbone/blob/master/LICENSE.  It has no "alignment":http://nethack.wikia.com/wiki/Alignment "restrictions":http://apebox.org/wordpress/rants/456/.
